// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "order-service/app/models"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// DeliveryOrderDetailRepositoryInterface is an autogenerated mock type for the DeliveryOrderDetailRepositoryInterface type
type DeliveryOrderDetailRepositoryInterface struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: ID, countOnly, ctx, result
func (_m *DeliveryOrderDetailRepositoryInterface) GetByID(ID int, countOnly bool, ctx context.Context, result chan *models.DeliveryOrderDetailChan) {
	_m.Called(ID, countOnly, ctx, result)
}

// GetByDeliveryOrderID provides a mock function with given fields: deliveryOrderID, countOnly, ctx, result
func (_m *DeliveryOrderDetailRepositoryInterface) GetByDeliveryOrderID(deliveryOrderID int, countOnly bool, ctx context.Context, result chan *models.DeliveryOrderDetailsChan) {
	_m.Called(deliveryOrderID, countOnly, ctx, result)
}

// GetBySalesOrderID provides a mock function with given fields: salesOrderID, countOnly, ctx, result
func (_m *DeliveryOrderDetailRepositoryInterface) GetBySalesOrderID(salesOrderID int, countOnly bool, ctx context.Context, result chan *models.SalesOrderDetailsChan) {
	_m.Called(salesOrderID, countOnly, ctx, result)
}

// Insert provides a mock function with given fields: request, sqlTransaction, ctx, result
func (_m *DeliveryOrderDetailRepositoryInterface) Insert(request *models.DeliveryOrderDetail, sqlTransaction *sql.Tx, ctx context.Context, result chan *models.DeliveryOrderDetailChan) {
	_m.Called(request, sqlTransaction, ctx, result)
}

// UpdateByID provides a mock function with given fields: id, deliveryOrderDetail, sqlTransaction, ctx, result
func (_m *DeliveryOrderDetailRepositoryInterface) UpdateByID(id int, deliveryOrderDetail *models.DeliveryOrderDetail, sqlTransaction *sql.Tx, ctx context.Context, result chan *models.DeliveryOrderDetailChan) {
	_m.Called(id, deliveryOrderDetail, sqlTransaction, ctx, result)
}

type mockConstructorTestingTNewDeliveryOrderDetailRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewDeliveryOrderDetailRepositoryInterface creates a new instance of DeliveryOrderDetailRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDeliveryOrderDetailRepositoryInterface(t mockConstructorTestingTNewDeliveryOrderDetailRepositoryInterface) *DeliveryOrderDetailRepositoryInterface {
	mock := &DeliveryOrderDetailRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UpdateByID provides a mock function with given fields: id, deliveryOrderDetail, sqlTransaction, ctx, result
func (_m *DeliveryOrderDetailRepositoryInterface) DeleteByID(request *models.DeliveryOrderDetail,sqlTransaction *sql.Tx, ctx context.Context, resultChan chan *models.DeliveryOrderDetailChan) {
	_m.Called(request, ctx, resultChan)
}