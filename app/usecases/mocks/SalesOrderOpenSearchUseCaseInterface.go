// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "order-service/global/utils/model"

	mock "github.com/stretchr/testify/mock"

	models "order-service/app/models"

	sql "database/sql"
)

// SalesOrderUseCaseInterface is an autogenerated mock type for the SalesOrderUseCaseInterface type
type SalesOrderOpenSearchUseCaseInterface struct {
	mock.Mock
}

// SyncToOpenSearchFromCreateEvent provides a mock function with given fields: salesOrder, sqlTransaction, ctx
func (_m *SalesOrderOpenSearchUseCaseInterface) SyncToOpenSearchFromCreateEvent(salesOrder *models.SalesOrder, sqlTransaction *sql.Tx, ctx context.Context) *model.ErrorLog {
	ret := _m.Called(salesOrder, sqlTransaction, ctx)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.SalesOrder, *sql.Tx, context.Context) *model.ErrorLog); ok {
		r0 = rf(salesOrder, sqlTransaction, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}

// SyncToOpenSearchFromUpdateEvent provides a mock function with given fields: salesOrder, ctx
func (_m *SalesOrderOpenSearchUseCaseInterface) SyncToOpenSearchFromUpdateEvent(salesOrder *models.SalesOrder, ctx context.Context) *model.ErrorLog {
	ret := _m.Called(salesOrder, ctx)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.SalesOrder, context.Context) *model.ErrorLog); ok {
		r0 = rf(salesOrder, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}

// SyncToOpenSearchFromDeleteEvent provides a mock function with given fields: salesOrder, ctx
func (_m *SalesOrderOpenSearchUseCaseInterface) SyncToOpenSearchFromDeleteEvent(salesOrder *models.SalesOrder, ctx context.Context) *model.ErrorLog {
	ret := _m.Called(salesOrder, ctx)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.SalesOrder, context.Context) *model.ErrorLog); ok {
		r0 = rf(salesOrder, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}