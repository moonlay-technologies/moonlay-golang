// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	model "poc-order-service/global/utils/model"

	mock "github.com/stretchr/testify/mock"

	opensearch "github.com/opensearch-project/opensearch-go"
)

// OpenSearchClientInterface is an autogenerated mock type for the OpenSearchClientInterface type
type OpenSearchClientInterface struct {
	mock.Mock
}

// CreateDocument provides a mock function with given fields: index, documentID, document
func (_m *OpenSearchClientInterface) CreateDocument(index string, documentID string, document []byte) (string, error) {
	ret := _m.Called(index, documentID, document)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, []byte) string); ok {
		r0 = rf(index, documentID, document)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, []byte) error); ok {
		r1 = rf(index, documentID, document)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: index, documentID
func (_m *OpenSearchClientInterface) GetByID(index string, documentID string) (*model.OpenSearchGetResponse, error) {
	ret := _m.Called(index, documentID)

	var r0 *model.OpenSearchGetResponse
	if rf, ok := ret.Get(0).(func(string, string) *model.OpenSearchGetResponse); ok {
		r0 = rf(index, documentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OpenSearchGetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(index, documentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnection provides a mock function with given fields:
func (_m *OpenSearchClientInterface) GetConnection() *opensearch.Client {
	ret := _m.Called()

	var r0 *opensearch.Client
	if rf, ok := ret.Get(0).(func() *opensearch.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearch.Client)
		}
	}

	return r0
}

// Query provides a mock function with given fields: index, query
func (_m *OpenSearchClientInterface) Query(index string, query []byte) (*model.OpenSearchQueryResponse, error) {
	ret := _m.Called(index, query)

	var r0 *model.OpenSearchQueryResponse
	if rf, ok := ret.Get(0).(func(string, []byte) *model.OpenSearchQueryResponse); ok {
		r0 = rf(index, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OpenSearchQueryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []byte) error); ok {
		r1 = rf(index, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOpenSearchClientInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewOpenSearchClientInterface creates a new instance of OpenSearchClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOpenSearchClientInterface(t mockConstructorTestingTNewOpenSearchClientInterface) *OpenSearchClientInterface {
	mock := &OpenSearchClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
