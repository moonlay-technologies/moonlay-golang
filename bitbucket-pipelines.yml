# This is an example Starter pipeline configuration
# Use a skeleton to build, test and deploy using manual and parallel steps
# -----
# You can specify a custom docker image from Docker Hub as your build environment.

image: atlassian/default-image:3

pipelines:
  pull-requests:
    '**':
      # - parallel:
      - step:
          name: 'Build and Test'
          image: golang
          script:
            # - source bitbucket-pipelines-go.sh
            - if [ "${BITBUCKET_PR_DESTINATION_BRANCH}" != "development" ]; then printf 'ignoring'; exit; fi
            - go mod vendor
            - go test -cover -coverprofile=cover.out -coverpkg "./app/usecases" "./app/usecases"
      - step:
          name: 'Quality Gate'
          image: golang
          script:
            # - source bitbucket-pipelines-go.sh
            - if [ "${BITBUCKET_PR_DESTINATION_BRANCH}" != "development" ]; then printf 'ignoring'; exit; fi
            - echo "Quality Gate :\ checking test coverage treshold"
            - echo "Threshold :\ 10 %"
            - totalCoverage=`go tool cover -func=cover.out | grep total | grep -Eo '[0-9]+\.[0-9]+'`
            - echo "Current test coverage :\ $totalCoverage %"
            - if (( $(echo "$totalCoverage 10" | awk '{print ($1 > $2)}') )); then
            -  echo "OK";
            - else
            -  echo "Current test coverage is below threshold. Please add more unit tests or adjust threshold to a lower value.";
            -  echo "Failed";
            -  exit 1;
            - fi
        # - step:
        #     name: 'Lint'
        #     script:
        #       - if [ "${BITBUCKET_PR_DESTINATION_BRANCH}" != "development" ]; then printf 'ignoring'; exit; fi
        #       - golint -set_exit_status ./...
        # - step:
        #     name: 'Security scan'
        #     script:
        #       - if [ "${BITBUCKET_PR_DESTINATION_BRANCH}" != "development" ]; then printf 'ignoring'; exit; fi
        #       - go vet ./...
        # - step:
        #     name: 'Sonarqube Analysis'
        #     script:
        #       - if [ "${BITBUCKET_PR_DESTINATION_BRANCH}" != "development" ]; then printf 'ignoring'; exit; fi
        #       - pipe: sonarsource/sonarqube-scan:1.0.0
        #         variables:
        #           SONAR_HOST_URL: ${SONAR_HOST_URL} 
        #           SONAR_TOKEN: ${SONAR_TOKEN} 

    # The following deployment steps will be executed for each pipeline run. To configure your steps and conditionally deploy see https://support.atlassian.com/bitbucket-cloud/docs/configure-bitbucket-pipelinesyml/
  branches:
    development:
      - step:
          name: 'Deployment to Development'
          deployment: test
          script:
            - echo "Deployment Pipeline run on AWS CodePipeline"
    # uat:
    #   - step:
    #       name: 'Deployment to Staging'
    #       deployment: staging
    #       script:
    #         - echo "Your deployment to staging script goes here..."
    # master:
    #   - step:
    #       name: 'Deployment to Production'
    #       deployment: production
    #       script:
    #         - echo "Your deployment to production script goes here..."
