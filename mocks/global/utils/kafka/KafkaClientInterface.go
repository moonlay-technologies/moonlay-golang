// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	kafka "github.com/segmentio/kafka-go"

	mock "github.com/stretchr/testify/mock"
)

// KafkaClientInterface is an autogenerated mock type for the KafkaClientInterface type
type KafkaClientInterface struct {
	mock.Mock
}

// CreateTopic provides a mock function with given fields: topic, totalPartition, totalReplicationFactor
func (_m *KafkaClientInterface) CreateTopic(topic string, totalPartition int, totalReplicationFactor int) error {
	ret := _m.Called(topic, totalPartition, totalReplicationFactor)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int, int) error); ok {
		r0 = rf(topic, totalPartition, totalReplicationFactor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBrokers provides a mock function with given fields:
func (_m *KafkaClientInterface) GetBrokers() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetConnection provides a mock function with given fields:
func (_m *KafkaClientInterface) GetConnection() *kafka.Conn {
	ret := _m.Called()

	var r0 *kafka.Conn
	if rf, ok := ret.Get(0).(func() *kafka.Conn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.Conn)
		}
	}

	return r0
}

// GetController provides a mock function with given fields:
func (_m *KafkaClientInterface) GetController() *kafka.Conn {
	ret := _m.Called()

	var r0 *kafka.Conn
	if rf, ok := ret.Get(0).(func() *kafka.Conn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.Conn)
		}
	}

	return r0
}

// SetConsumerGroupReader provides a mock function with given fields: topic, groupID
func (_m *KafkaClientInterface) SetConsumerGroupReader(topic string, groupID string) *kafka.Reader {
	ret := _m.Called(topic, groupID)

	var r0 *kafka.Reader
	if rf, ok := ret.Get(0).(func(string, string) *kafka.Reader); ok {
		r0 = rf(topic, groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.Reader)
		}
	}

	return r0
}

// SetReader provides a mock function with given fields: topic, partition, offset
func (_m *KafkaClientInterface) SetReader(topic string, partition int, offset int64) *kafka.Reader {
	ret := _m.Called(topic, partition, offset)

	var r0 *kafka.Reader
	if rf, ok := ret.Get(0).(func(string, int, int64) *kafka.Reader); ok {
		r0 = rf(topic, partition, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.Reader)
		}
	}

	return r0
}

// SetWriter provides a mock function with given fields: topic
func (_m *KafkaClientInterface) SetWriter(topic string) {
	_m.Called(topic)
}

// WriteToTopic provides a mock function with given fields: topic, key, message
func (_m *KafkaClientInterface) WriteToTopic(topic string, key []byte, message []byte) error {
	ret := _m.Called(topic, key, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, []byte) error); ok {
		r0 = rf(topic, key, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewKafkaClientInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewKafkaClientInterface creates a new instance of KafkaClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKafkaClientInterface(t mockConstructorTestingTNewKafkaClientInterface) *KafkaClientInterface {
	mock := &KafkaClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
