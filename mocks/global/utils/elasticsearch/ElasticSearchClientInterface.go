// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	elasticsearch "github.com/elastic/go-elasticsearch/v8"
	mock "github.com/stretchr/testify/mock"

	model "poc-order-service/global/utils/model"
)

// ElasticSearchClientInterface is an autogenerated mock type for the ElasticSearchClientInterface type
type ElasticSearchClientInterface struct {
	mock.Mock
}

// GetConnection provides a mock function with given fields:
func (_m *ElasticSearchClientInterface) GetConnection() *elasticsearch.Client {
	ret := _m.Called()

	var r0 *elasticsearch.Client
	if rf, ok := ret.Get(0).(func() *elasticsearch.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticsearch.Client)
		}
	}

	return r0
}

// InsertDocument provides a mock function with given fields: index, body
func (_m *ElasticSearchClientInterface) InsertDocument(index string, body []byte) (string, error) {
	ret := _m.Called(index, body)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, []byte) string); ok {
		r0 = rf(index, body)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []byte) error); ok {
		r1 = rf(index, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: index, query
func (_m *ElasticSearchClientInterface) Query(index string, query map[string]interface{}) (*model.ElasticSearchQueryResponse, error) {
	ret := _m.Called(index, query)

	var r0 *model.ElasticSearchQueryResponse
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) *model.ElasticSearchQueryResponse); ok {
		r0 = rf(index, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ElasticSearchQueryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, map[string]interface{}) error); ok {
		r1 = rf(index, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewElasticSearchClientInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewElasticSearchClientInterface creates a new instance of ElasticSearchClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewElasticSearchClientInterface(t mockConstructorTestingTNewElasticSearchClientInterface) *ElasticSearchClientInterface {
	mock := &ElasticSearchClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
