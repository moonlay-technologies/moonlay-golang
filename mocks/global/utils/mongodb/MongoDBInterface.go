// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	mongo "go.mongodb.org/mongo-driver/mongo"
)

// MongoDBInterface is an autogenerated mock type for the MongoDBInterface type
type MongoDBInterface struct {
	mock.Mock
}

// Client provides a mock function with given fields:
func (_m *MongoDBInterface) Client() *mongo.Client {
	ret := _m.Called()

	var r0 *mongo.Client
	if rf, ok := ret.Get(0).(func() *mongo.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Client)
		}
	}

	return r0
}

// GetCtx provides a mock function with given fields:
func (_m *MongoDBInterface) GetCtx() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

type mockConstructorTestingTNewMongoDBInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewMongoDBInterface creates a new instance of MongoDBInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMongoDBInterface(t mockConstructorTestingTNewMongoDBInterface) *MongoDBInterface {
	mock := &MongoDBInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
