// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"
)

// SqlInterface is an autogenerated mock type for the SqlInterface type
type SqlInterface struct {
	mock.Mock
}

// DB provides a mock function with given fields:
func (_m *SqlInterface) DB() *sql.DB {
	ret := _m.Called()

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

type mockConstructorTestingTNewSqlInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewSqlInterface creates a new instance of SqlInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSqlInterface(t mockConstructorTestingTNewSqlInterface) *SqlInterface {
	mock := &SqlInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
