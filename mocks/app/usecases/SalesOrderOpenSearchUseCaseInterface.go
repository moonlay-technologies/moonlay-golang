// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "order-service/global/utils/model"

	mock "github.com/stretchr/testify/mock"

	models "order-service/app/models"

	sql "database/sql"
)

// SalesOrderOpenSearchUseCaseInterface is an autogenerated mock type for the SalesOrderOpenSearchUseCaseInterface type
type SalesOrderOpenSearchUseCaseInterface struct {
	mock.Mock
}

// Get provides a mock function with given fields: request
func (_m *SalesOrderOpenSearchUseCaseInterface) Get(request *models.SalesOrderExportRequest) *model.ErrorLog {
	ret := _m.Called(request)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.SalesOrderExportRequest) *model.ErrorLog); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}

// GetDetails provides a mock function with given fields: request
func (_m *SalesOrderOpenSearchUseCaseInterface) GetDetails(request *models.SalesOrderDetailExportRequest) *model.ErrorLog {
	ret := _m.Called(request)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.SalesOrderDetailExportRequest) *model.ErrorLog); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}

// SyncDetailToOpenSearchFromCreateEvent provides a mock function with given fields: salesOrderDetail, sqlTransaction, ctx
func (_m *SalesOrderOpenSearchUseCaseInterface) SyncDetailToOpenSearchFromCreateEvent(salesOrderDetail *models.SalesOrderDetail, sqlTransaction *sql.Tx, ctx context.Context) *model.ErrorLog {
	ret := _m.Called(salesOrderDetail, sqlTransaction, ctx)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.SalesOrderDetail, *sql.Tx, context.Context) *model.ErrorLog); ok {
		r0 = rf(salesOrderDetail, sqlTransaction, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}

// SyncDetailToOpenSearchFromDeleteEvent provides a mock function with given fields: salesOrderDetail, ctx
func (_m *SalesOrderOpenSearchUseCaseInterface) SyncDetailToOpenSearchFromDeleteEvent(salesOrderDetail *models.SalesOrderDetail, ctx context.Context) *model.ErrorLog {
	ret := _m.Called(salesOrderDetail, ctx)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.SalesOrderDetail, context.Context) *model.ErrorLog); ok {
		r0 = rf(salesOrderDetail, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}

// SyncDetailToOpenSearchFromUpdateEvent provides a mock function with given fields: salesOrder, salesOrderDetail, sqlTransaction, ctx
func (_m *SalesOrderOpenSearchUseCaseInterface) SyncDetailToOpenSearchFromUpdateEvent(salesOrder *models.SalesOrder, salesOrderDetail *models.SalesOrderDetail, sqlTransaction *sql.Tx, ctx context.Context) *model.ErrorLog {
	ret := _m.Called(salesOrder, salesOrderDetail, sqlTransaction, ctx)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.SalesOrder, *models.SalesOrderDetail, *sql.Tx, context.Context) *model.ErrorLog); ok {
		r0 = rf(salesOrder, salesOrderDetail, sqlTransaction, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}

// SyncToOpenSearchFromCreateEvent provides a mock function with given fields: salesOrder, sqlTransaction, ctx
func (_m *SalesOrderOpenSearchUseCaseInterface) SyncToOpenSearchFromCreateEvent(salesOrder *models.SalesOrder, sqlTransaction *sql.Tx, ctx context.Context) *model.ErrorLog {
	ret := _m.Called(salesOrder, sqlTransaction, ctx)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.SalesOrder, *sql.Tx, context.Context) *model.ErrorLog); ok {
		r0 = rf(salesOrder, sqlTransaction, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}

// SyncToOpenSearchFromDeleteEvent provides a mock function with given fields: salesOrder, ctx
func (_m *SalesOrderOpenSearchUseCaseInterface) SyncToOpenSearchFromDeleteEvent(salesOrder *models.SalesOrder, ctx context.Context) *model.ErrorLog {
	ret := _m.Called(salesOrder, ctx)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.SalesOrder, context.Context) *model.ErrorLog); ok {
		r0 = rf(salesOrder, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}

// SyncToOpenSearchFromUpdateEvent provides a mock function with given fields: salesOrder, ctx
func (_m *SalesOrderOpenSearchUseCaseInterface) SyncToOpenSearchFromUpdateEvent(salesOrder *models.SalesOrder, ctx context.Context) *model.ErrorLog {
	ret := _m.Called(salesOrder, ctx)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.SalesOrder, context.Context) *model.ErrorLog); ok {
		r0 = rf(salesOrder, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}

type mockConstructorTestingTNewSalesOrderOpenSearchUseCaseInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewSalesOrderOpenSearchUseCaseInterface creates a new instance of SalesOrderOpenSearchUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSalesOrderOpenSearchUseCaseInterface(t mockConstructorTestingTNewSalesOrderOpenSearchUseCaseInterface) *SalesOrderOpenSearchUseCaseInterface {
	mock := &SalesOrderOpenSearchUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
