// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "order-service/global/utils/model"

	mock "github.com/stretchr/testify/mock"

	models "order-service/app/models"

	sql "database/sql"
)

// SalesOrderUseCaseInterface is an autogenerated mock type for the SalesOrderUseCaseInterface type
type SalesOrderUseCaseInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: request, sqlTransaction, ctx
func (_m *SalesOrderUseCaseInterface) Create(request *models.SalesOrderStoreRequest, sqlTransaction *sql.Tx, ctx context.Context) ([]*models.SalesOrderResponse, *model.ErrorLog) {
	ret := _m.Called(request, sqlTransaction, ctx)

	var r0 []*models.SalesOrderResponse
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.SalesOrderStoreRequest, *sql.Tx, context.Context) ([]*models.SalesOrderResponse, *model.ErrorLog)); ok {
		return rf(request, sqlTransaction, ctx)
	}
	if rf, ok := ret.Get(0).(func(*models.SalesOrderStoreRequest, *sql.Tx, context.Context) []*models.SalesOrderResponse); ok {
		r0 = rf(request, sqlTransaction, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.SalesOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.SalesOrderStoreRequest, *sql.Tx, context.Context) *model.ErrorLog); ok {
		r1 = rf(request, sqlTransaction, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// DeleteById provides a mock function with given fields: id, sqlTransaction
func (_m *SalesOrderUseCaseInterface) DeleteById(id int, sqlTransaction *sql.Tx) *model.ErrorLog {
	ret := _m.Called(id, sqlTransaction)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(int, *sql.Tx) *model.ErrorLog); ok {
		r0 = rf(id, sqlTransaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}

// DeleteDetailById provides a mock function with given fields: id, sqlTransaction
func (_m *SalesOrderUseCaseInterface) DeleteDetailById(id int, sqlTransaction *sql.Tx) *model.ErrorLog {
	ret := _m.Called(id, sqlTransaction)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(int, *sql.Tx) *model.ErrorLog); ok {
		r0 = rf(id, sqlTransaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}

// DeleteDetailBySOId provides a mock function with given fields: id, sqlTransaction
func (_m *SalesOrderUseCaseInterface) DeleteDetailBySOId(id int, sqlTransaction *sql.Tx) *model.ErrorLog {
	ret := _m.Called(id, sqlTransaction)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(int, *sql.Tx) *model.ErrorLog); ok {
		r0 = rf(id, sqlTransaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}

// Export provides a mock function with given fields: request, ctx
func (_m *SalesOrderUseCaseInterface) Export(request *models.SalesOrderExportRequest, ctx context.Context) (string, *model.ErrorLog) {
	ret := _m.Called(request, ctx)

	var r0 string
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.SalesOrderExportRequest, context.Context) (string, *model.ErrorLog)); ok {
		return rf(request, ctx)
	}
	if rf, ok := ret.Get(0).(func(*models.SalesOrderExportRequest, context.Context) string); ok {
		r0 = rf(request, ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*models.SalesOrderExportRequest, context.Context) *model.ErrorLog); ok {
		r1 = rf(request, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// ExportDetail provides a mock function with given fields: request, ctx
func (_m *SalesOrderUseCaseInterface) ExportDetail(request *models.SalesOrderDetailExportRequest, ctx context.Context) (string, *model.ErrorLog) {
	ret := _m.Called(request, ctx)

	var r0 string
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.SalesOrderDetailExportRequest, context.Context) (string, *model.ErrorLog)); ok {
		return rf(request, ctx)
	}
	if rf, ok := ret.Get(0).(func(*models.SalesOrderDetailExportRequest, context.Context) string); ok {
		r0 = rf(request, ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*models.SalesOrderDetailExportRequest, context.Context) *model.ErrorLog); ok {
		r1 = rf(request, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// Get provides a mock function with given fields: request
func (_m *SalesOrderUseCaseInterface) Get(request *models.SalesOrderRequest) (*models.SalesOrdersOpenSearchResponse, *model.ErrorLog) {
	ret := _m.Called(request)

	var r0 *models.SalesOrdersOpenSearchResponse
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.SalesOrderRequest) (*models.SalesOrdersOpenSearchResponse, *model.ErrorLog)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*models.SalesOrderRequest) *models.SalesOrdersOpenSearchResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SalesOrdersOpenSearchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.SalesOrderRequest) *model.ErrorLog); ok {
		r1 = rf(request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// GetByAgentID provides a mock function with given fields: request
func (_m *SalesOrderUseCaseInterface) GetByAgentID(request *models.SalesOrderRequest) (*models.SalesOrders, *model.ErrorLog) {
	ret := _m.Called(request)

	var r0 *models.SalesOrders
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.SalesOrderRequest) (*models.SalesOrders, *model.ErrorLog)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*models.SalesOrderRequest) *models.SalesOrders); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SalesOrders)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.SalesOrderRequest) *model.ErrorLog); ok {
		r1 = rf(request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: request, ctx
func (_m *SalesOrderUseCaseInterface) GetByID(request *models.SalesOrderRequest, ctx context.Context) ([]*models.SalesOrderOpenSearchResponse, *model.ErrorLog) {
	ret := _m.Called(request, ctx)

	var r0 []*models.SalesOrderOpenSearchResponse
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.SalesOrderRequest, context.Context) ([]*models.SalesOrderOpenSearchResponse, *model.ErrorLog)); ok {
		return rf(request, ctx)
	}
	if rf, ok := ret.Get(0).(func(*models.SalesOrderRequest, context.Context) []*models.SalesOrderOpenSearchResponse); ok {
		r0 = rf(request, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.SalesOrderOpenSearchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.SalesOrderRequest, context.Context) *model.ErrorLog); ok {
		r1 = rf(request, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// GetByIDWithDetail provides a mock function with given fields: request, ctx
func (_m *SalesOrderUseCaseInterface) GetByIDWithDetail(request *models.SalesOrderRequest, ctx context.Context) (*models.SalesOrder, *model.ErrorLog) {
	ret := _m.Called(request, ctx)

	var r0 *models.SalesOrder
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.SalesOrderRequest, context.Context) (*models.SalesOrder, *model.ErrorLog)); ok {
		return rf(request, ctx)
	}
	if rf, ok := ret.Get(0).(func(*models.SalesOrderRequest, context.Context) *models.SalesOrder); ok {
		r0 = rf(request, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SalesOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.SalesOrderRequest, context.Context) *model.ErrorLog); ok {
		r1 = rf(request, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// GetByOrderSourceID provides a mock function with given fields: request
func (_m *SalesOrderUseCaseInterface) GetByOrderSourceID(request *models.SalesOrderRequest) (*models.SalesOrders, *model.ErrorLog) {
	ret := _m.Called(request)

	var r0 *models.SalesOrders
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.SalesOrderRequest) (*models.SalesOrders, *model.ErrorLog)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*models.SalesOrderRequest) *models.SalesOrders); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SalesOrders)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.SalesOrderRequest) *model.ErrorLog); ok {
		r1 = rf(request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// GetByOrderStatusID provides a mock function with given fields: request
func (_m *SalesOrderUseCaseInterface) GetByOrderStatusID(request *models.SalesOrderRequest) (*models.SalesOrders, *model.ErrorLog) {
	ret := _m.Called(request)

	var r0 *models.SalesOrders
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.SalesOrderRequest) (*models.SalesOrders, *model.ErrorLog)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*models.SalesOrderRequest) *models.SalesOrders); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SalesOrders)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.SalesOrderRequest) *model.ErrorLog); ok {
		r1 = rf(request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// GetBySalesmanID provides a mock function with given fields: request
func (_m *SalesOrderUseCaseInterface) GetBySalesmanID(request *models.SalesOrderRequest) (*models.SalesOrders, *model.ErrorLog) {
	ret := _m.Called(request)

	var r0 *models.SalesOrders
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.SalesOrderRequest) (*models.SalesOrders, *model.ErrorLog)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*models.SalesOrderRequest) *models.SalesOrders); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SalesOrders)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.SalesOrderRequest) *model.ErrorLog); ok {
		r1 = rf(request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// GetByStoreID provides a mock function with given fields: request
func (_m *SalesOrderUseCaseInterface) GetByStoreID(request *models.SalesOrderRequest) (*models.SalesOrders, *model.ErrorLog) {
	ret := _m.Called(request)

	var r0 *models.SalesOrders
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.SalesOrderRequest) (*models.SalesOrders, *model.ErrorLog)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*models.SalesOrderRequest) *models.SalesOrders); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SalesOrders)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.SalesOrderRequest) *model.ErrorLog); ok {
		r1 = rf(request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// GetDetailById provides a mock function with given fields: id
func (_m *SalesOrderUseCaseInterface) GetDetailById(id int) (*models.SalesOrderDetailOpenSearchResponse, *model.ErrorLog) {
	ret := _m.Called(id)

	var r0 *models.SalesOrderDetailOpenSearchResponse
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(int) (*models.SalesOrderDetailOpenSearchResponse, *model.ErrorLog)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.SalesOrderDetailOpenSearchResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SalesOrderDetailOpenSearchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int) *model.ErrorLog); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// GetDetails provides a mock function with given fields: request
func (_m *SalesOrderUseCaseInterface) GetDetails(request *models.GetSalesOrderDetailRequest) (*models.SalesOrderDetailsOpenSearchResponse, *model.ErrorLog) {
	ret := _m.Called(request)

	var r0 *models.SalesOrderDetailsOpenSearchResponse
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.GetSalesOrderDetailRequest) (*models.SalesOrderDetailsOpenSearchResponse, *model.ErrorLog)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*models.GetSalesOrderDetailRequest) *models.SalesOrderDetailsOpenSearchResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SalesOrderDetailsOpenSearchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.GetSalesOrderDetailRequest) *model.ErrorLog); ok {
		r1 = rf(request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// GetSOJourneyBySOId provides a mock function with given fields: soId, ctx
func (_m *SalesOrderUseCaseInterface) GetSOJourneyBySOId(soId int, ctx context.Context) (*models.SalesOrderJourneyResponses, *model.ErrorLog) {
	ret := _m.Called(soId, ctx)

	var r0 *models.SalesOrderJourneyResponses
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(int, context.Context) (*models.SalesOrderJourneyResponses, *model.ErrorLog)); ok {
		return rf(soId, ctx)
	}
	if rf, ok := ret.Get(0).(func(int, context.Context) *models.SalesOrderJourneyResponses); ok {
		r0 = rf(soId, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SalesOrderJourneyResponses)
		}
	}

	if rf, ok := ret.Get(1).(func(int, context.Context) *model.ErrorLog); ok {
		r1 = rf(soId, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// GetSOJourneys provides a mock function with given fields: request, ctx
func (_m *SalesOrderUseCaseInterface) GetSOJourneys(request *models.SalesOrderJourneyRequest, ctx context.Context) (*models.SalesOrderJourneyResponses, *model.ErrorLog) {
	ret := _m.Called(request, ctx)

	var r0 *models.SalesOrderJourneyResponses
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.SalesOrderJourneyRequest, context.Context) (*models.SalesOrderJourneyResponses, *model.ErrorLog)); ok {
		return rf(request, ctx)
	}
	if rf, ok := ret.Get(0).(func(*models.SalesOrderJourneyRequest, context.Context) *models.SalesOrderJourneyResponses); ok {
		r0 = rf(request, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SalesOrderJourneyResponses)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.SalesOrderJourneyRequest, context.Context) *model.ErrorLog); ok {
		r1 = rf(request, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// GetSOUploadErrorLogsByReqId provides a mock function with given fields: request, ctx
func (_m *SalesOrderUseCaseInterface) GetSOUploadErrorLogsByReqId(request *models.GetSoUploadErrorLogsRequest, ctx context.Context) (*models.GetSoUploadErrorLogsResponse, *model.ErrorLog) {
	ret := _m.Called(request, ctx)

	var r0 *models.GetSoUploadErrorLogsResponse
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.GetSoUploadErrorLogsRequest, context.Context) (*models.GetSoUploadErrorLogsResponse, *model.ErrorLog)); ok {
		return rf(request, ctx)
	}
	if rf, ok := ret.Get(0).(func(*models.GetSoUploadErrorLogsRequest, context.Context) *models.GetSoUploadErrorLogsResponse); ok {
		r0 = rf(request, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GetSoUploadErrorLogsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.GetSoUploadErrorLogsRequest, context.Context) *model.ErrorLog); ok {
		r1 = rf(request, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// GetSOUploadErrorLogsBySoUploadHistoryId provides a mock function with given fields: request, ctx
func (_m *SalesOrderUseCaseInterface) GetSOUploadErrorLogsBySoUploadHistoryId(request *models.GetSoUploadErrorLogsRequest, ctx context.Context) (*models.GetSoUploadErrorLogsResponse, *model.ErrorLog) {
	ret := _m.Called(request, ctx)

	var r0 *models.GetSoUploadErrorLogsResponse
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.GetSoUploadErrorLogsRequest, context.Context) (*models.GetSoUploadErrorLogsResponse, *model.ErrorLog)); ok {
		return rf(request, ctx)
	}
	if rf, ok := ret.Get(0).(func(*models.GetSoUploadErrorLogsRequest, context.Context) *models.GetSoUploadErrorLogsResponse); ok {
		r0 = rf(request, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GetSoUploadErrorLogsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.GetSoUploadErrorLogsRequest, context.Context) *model.ErrorLog); ok {
		r1 = rf(request, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// GetSOUploadHistories provides a mock function with given fields: request, ctx
func (_m *SalesOrderUseCaseInterface) GetSOUploadHistories(request *models.GetSoUploadHistoriesRequest, ctx context.Context) (*models.GetSoUploadHistoryResponses, *model.ErrorLog) {
	ret := _m.Called(request, ctx)

	var r0 *models.GetSoUploadHistoryResponses
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.GetSoUploadHistoriesRequest, context.Context) (*models.GetSoUploadHistoryResponses, *model.ErrorLog)); ok {
		return rf(request, ctx)
	}
	if rf, ok := ret.Get(0).(func(*models.GetSoUploadHistoriesRequest, context.Context) *models.GetSoUploadHistoryResponses); ok {
		r0 = rf(request, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GetSoUploadHistoryResponses)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.GetSoUploadHistoriesRequest, context.Context) *model.ErrorLog); ok {
		r1 = rf(request, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// GetSOUploadHistoriesByid provides a mock function with given fields: id, ctx
func (_m *SalesOrderUseCaseInterface) GetSOUploadHistoriesByid(id string, ctx context.Context) (*models.GetSoUploadHistoryResponse, *model.ErrorLog) {
	ret := _m.Called(id, ctx)

	var r0 *models.GetSoUploadHistoryResponse
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(string, context.Context) (*models.GetSoUploadHistoryResponse, *model.ErrorLog)); ok {
		return rf(id, ctx)
	}
	if rf, ok := ret.Get(0).(func(string, context.Context) *models.GetSoUploadHistoryResponse); ok {
		r0 = rf(id, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GetSoUploadHistoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, context.Context) *model.ErrorLog); ok {
		r1 = rf(id, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// GetSyncToKafkaHistories provides a mock function with given fields: request, ctx
func (_m *SalesOrderUseCaseInterface) GetSyncToKafkaHistories(request *models.SalesOrderEventLogRequest, ctx context.Context) ([]*models.SalesOrderEventLogResponse, *model.ErrorLog) {
	ret := _m.Called(request, ctx)

	var r0 []*models.SalesOrderEventLogResponse
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.SalesOrderEventLogRequest, context.Context) ([]*models.SalesOrderEventLogResponse, *model.ErrorLog)); ok {
		return rf(request, ctx)
	}
	if rf, ok := ret.Get(0).(func(*models.SalesOrderEventLogRequest, context.Context) []*models.SalesOrderEventLogResponse); ok {
		r0 = rf(request, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.SalesOrderEventLogResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.SalesOrderEventLogRequest, context.Context) *model.ErrorLog); ok {
		r1 = rf(request, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// RetrySyncToKafka provides a mock function with given fields: logId
func (_m *SalesOrderUseCaseInterface) RetrySyncToKafka(logId string) (*models.SORetryProcessSyncToKafkaResponse, *model.ErrorLog) {
	ret := _m.Called(logId)

	var r0 *models.SORetryProcessSyncToKafkaResponse
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(string) (*models.SORetryProcessSyncToKafkaResponse, *model.ErrorLog)); ok {
		return rf(logId)
	}
	if rf, ok := ret.Get(0).(func(string) *models.SORetryProcessSyncToKafkaResponse); ok {
		r0 = rf(logId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SORetryProcessSyncToKafkaResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *model.ErrorLog); ok {
		r1 = rf(logId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// UpdateById provides a mock function with given fields: id, request, sqlTransaction, ctx
func (_m *SalesOrderUseCaseInterface) UpdateById(id int, request *models.SalesOrderUpdateRequest, sqlTransaction *sql.Tx, ctx context.Context) (*models.SalesOrderResponse, *model.ErrorLog) {
	ret := _m.Called(id, request, sqlTransaction, ctx)

	var r0 *models.SalesOrderResponse
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(int, *models.SalesOrderUpdateRequest, *sql.Tx, context.Context) (*models.SalesOrderResponse, *model.ErrorLog)); ok {
		return rf(id, request, sqlTransaction, ctx)
	}
	if rf, ok := ret.Get(0).(func(int, *models.SalesOrderUpdateRequest, *sql.Tx, context.Context) *models.SalesOrderResponse); ok {
		r0 = rf(id, request, sqlTransaction, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SalesOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int, *models.SalesOrderUpdateRequest, *sql.Tx, context.Context) *model.ErrorLog); ok {
		r1 = rf(id, request, sqlTransaction, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// UpdateSODetailById provides a mock function with given fields: soId, soDetailId, request, sqlTransaction, ctx
func (_m *SalesOrderUseCaseInterface) UpdateSODetailById(soId int, soDetailId int, request *models.SalesOrderDetailUpdateByIdRequest, sqlTransaction *sql.Tx, ctx context.Context) (*models.SalesOrderDetailStoreResponse, *model.ErrorLog) {
	ret := _m.Called(soId, soDetailId, request, sqlTransaction, ctx)

	var r0 *models.SalesOrderDetailStoreResponse
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(int, int, *models.SalesOrderDetailUpdateByIdRequest, *sql.Tx, context.Context) (*models.SalesOrderDetailStoreResponse, *model.ErrorLog)); ok {
		return rf(soId, soDetailId, request, sqlTransaction, ctx)
	}
	if rf, ok := ret.Get(0).(func(int, int, *models.SalesOrderDetailUpdateByIdRequest, *sql.Tx, context.Context) *models.SalesOrderDetailStoreResponse); ok {
		r0 = rf(soId, soDetailId, request, sqlTransaction, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SalesOrderDetailStoreResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, *models.SalesOrderDetailUpdateByIdRequest, *sql.Tx, context.Context) *model.ErrorLog); ok {
		r1 = rf(soId, soDetailId, request, sqlTransaction, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// UpdateSODetailBySOId provides a mock function with given fields: soId, request, sqlTransaction, ctx
func (_m *SalesOrderUseCaseInterface) UpdateSODetailBySOId(soId int, request *models.SalesOrderUpdateRequest, sqlTransaction *sql.Tx, ctx context.Context) (*models.SalesOrderResponse, *model.ErrorLog) {
	ret := _m.Called(soId, request, sqlTransaction, ctx)

	var r0 *models.SalesOrderResponse
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(int, *models.SalesOrderUpdateRequest, *sql.Tx, context.Context) (*models.SalesOrderResponse, *model.ErrorLog)); ok {
		return rf(soId, request, sqlTransaction, ctx)
	}
	if rf, ok := ret.Get(0).(func(int, *models.SalesOrderUpdateRequest, *sql.Tx, context.Context) *models.SalesOrderResponse); ok {
		r0 = rf(soId, request, sqlTransaction, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SalesOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int, *models.SalesOrderUpdateRequest, *sql.Tx, context.Context) *model.ErrorLog); ok {
		r1 = rf(soId, request, sqlTransaction, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewSalesOrderUseCaseInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewSalesOrderUseCaseInterface creates a new instance of SalesOrderUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSalesOrderUseCaseInterface(t mockConstructorTestingTNewSalesOrderUseCaseInterface) *SalesOrderUseCaseInterface {
	mock := &SalesOrderUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
