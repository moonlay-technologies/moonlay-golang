// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "order-service/global/utils/model"

	mock "github.com/stretchr/testify/mock"

	models "order-service/app/models"
)

// UploadUseCaseInterface is an autogenerated mock type for the UploadUseCaseInterface type
type UploadUseCaseInterface struct {
	mock.Mock
}

// GetSosjUploadErrorLogBySosjUploadHistoryId provides a mock function with given fields: request, ctx
func (_m *UploadUseCaseInterface) GetSosjUploadErrorLogBySosjUploadHistoryId(request *models.GetSosjUploadErrorLogsRequest, ctx context.Context) (*models.GetSosjUploadErrorLogsResponse, *model.ErrorLog) {
	ret := _m.Called(request, ctx)

	var r0 *models.GetSosjUploadErrorLogsResponse
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.GetSosjUploadErrorLogsRequest, context.Context) (*models.GetSosjUploadErrorLogsResponse, *model.ErrorLog)); ok {
		return rf(request, ctx)
	}
	if rf, ok := ret.Get(0).(func(*models.GetSosjUploadErrorLogsRequest, context.Context) *models.GetSosjUploadErrorLogsResponse); ok {
		r0 = rf(request, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GetSosjUploadErrorLogsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.GetSosjUploadErrorLogsRequest, context.Context) *model.ErrorLog); ok {
		r1 = rf(request, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// GetSosjUploadErrorLogs provides a mock function with given fields: request, ctx
func (_m *UploadUseCaseInterface) GetSosjUploadErrorLogs(request *models.GetSosjUploadErrorLogsRequest, ctx context.Context) (*models.GetSosjUploadErrorLogsResponse, *model.ErrorLog) {
	ret := _m.Called(request, ctx)

	var r0 *models.GetSosjUploadErrorLogsResponse
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.GetSosjUploadErrorLogsRequest, context.Context) (*models.GetSosjUploadErrorLogsResponse, *model.ErrorLog)); ok {
		return rf(request, ctx)
	}
	if rf, ok := ret.Get(0).(func(*models.GetSosjUploadErrorLogsRequest, context.Context) *models.GetSosjUploadErrorLogsResponse); ok {
		r0 = rf(request, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GetSosjUploadErrorLogsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.GetSosjUploadErrorLogsRequest, context.Context) *model.ErrorLog); ok {
		r1 = rf(request, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// GetSosjUploadHistories provides a mock function with given fields: request, ctx
func (_m *UploadUseCaseInterface) GetSosjUploadHistories(request *models.GetSosjUploadHistoriesRequest, ctx context.Context) (*models.GetSosjUploadHistoryResponses, *model.ErrorLog) {
	ret := _m.Called(request, ctx)

	var r0 *models.GetSosjUploadHistoryResponses
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.GetSosjUploadHistoriesRequest, context.Context) (*models.GetSosjUploadHistoryResponses, *model.ErrorLog)); ok {
		return rf(request, ctx)
	}
	if rf, ok := ret.Get(0).(func(*models.GetSosjUploadHistoriesRequest, context.Context) *models.GetSosjUploadHistoryResponses); ok {
		r0 = rf(request, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GetSosjUploadHistoryResponses)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.GetSosjUploadHistoriesRequest, context.Context) *model.ErrorLog); ok {
		r1 = rf(request, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// GetSosjUploadHistoryById provides a mock function with given fields: id, ctx
func (_m *UploadUseCaseInterface) GetSosjUploadHistoryById(id string, ctx context.Context) (*models.GetSosjUploadHistoryResponse, *model.ErrorLog) {
	ret := _m.Called(id, ctx)

	var r0 *models.GetSosjUploadHistoryResponse
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(string, context.Context) (*models.GetSosjUploadHistoryResponse, *model.ErrorLog)); ok {
		return rf(id, ctx)
	}
	if rf, ok := ret.Get(0).(func(string, context.Context) *models.GetSosjUploadHistoryResponse); ok {
		r0 = rf(id, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GetSosjUploadHistoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, context.Context) *model.ErrorLog); ok {
		r1 = rf(id, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// RetryUploadDO provides a mock function with given fields: sjUploadHistoryId, ctx
func (_m *UploadUseCaseInterface) RetryUploadDO(sjUploadHistoryId string, ctx context.Context) *model.ErrorLog {
	ret := _m.Called(sjUploadHistoryId, ctx)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(string, context.Context) *model.ErrorLog); ok {
		r0 = rf(sjUploadHistoryId, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}

// RetryUploadSO provides a mock function with given fields: soUploadHistoryId, ctx
func (_m *UploadUseCaseInterface) RetryUploadSO(soUploadHistoryId string, ctx context.Context) *model.ErrorLog {
	ret := _m.Called(soUploadHistoryId, ctx)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(string, context.Context) *model.ErrorLog); ok {
		r0 = rf(soUploadHistoryId, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}

// RetryUploadSOSJ provides a mock function with given fields: sosjUploadHistoryId, ctx
func (_m *UploadUseCaseInterface) RetryUploadSOSJ(sosjUploadHistoryId string, ctx context.Context) *model.ErrorLog {
	ret := _m.Called(sosjUploadHistoryId, ctx)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(string, context.Context) *model.ErrorLog); ok {
		r0 = rf(sosjUploadHistoryId, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}

// UploadDO provides a mock function with given fields: request, ctx
func (_m *UploadUseCaseInterface) UploadDO(request *models.UploadDORequest, ctx context.Context) *model.ErrorLog {
	ret := _m.Called(request, ctx)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.UploadDORequest, context.Context) *model.ErrorLog); ok {
		r0 = rf(request, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}

// UploadSO provides a mock function with given fields: request, ctx
func (_m *UploadUseCaseInterface) UploadSO(request *models.UploadSORequest, ctx context.Context) *model.ErrorLog {
	ret := _m.Called(request, ctx)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.UploadSORequest, context.Context) *model.ErrorLog); ok {
		r0 = rf(request, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}

// UploadSOSJ provides a mock function with given fields: request, ctx
func (_m *UploadUseCaseInterface) UploadSOSJ(request *models.UploadSOSJRequest, ctx context.Context) *model.ErrorLog {
	ret := _m.Called(request, ctx)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.UploadSOSJRequest, context.Context) *model.ErrorLog); ok {
		r0 = rf(request, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}

type mockConstructorTestingTNewUploadUseCaseInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewUploadUseCaseInterface creates a new instance of UploadUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUploadUseCaseInterface(t mockConstructorTestingTNewUploadUseCaseInterface) *UploadUseCaseInterface {
	mock := &UploadUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
