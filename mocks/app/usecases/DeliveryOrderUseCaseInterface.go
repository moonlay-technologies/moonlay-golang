// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "order-service/global/utils/model"

	mock "github.com/stretchr/testify/mock"

	models "order-service/app/models"

	sql "database/sql"

	usecases "order-service/app/usecases"
)

// DeliveryOrderUseCaseInterface is an autogenerated mock type for the DeliveryOrderUseCaseInterface type
type DeliveryOrderUseCaseInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: request, sqlTransaction, ctx
func (_m *DeliveryOrderUseCaseInterface) Create(request *models.DeliveryOrderStoreRequest, sqlTransaction *sql.Tx, ctx context.Context) (*models.DeliveryOrder, *model.ErrorLog) {
	ret := _m.Called(request, sqlTransaction, ctx)

	var r0 *models.DeliveryOrder
	if rf, ok := ret.Get(0).(func(*models.DeliveryOrderStoreRequest, *sql.Tx, context.Context) *models.DeliveryOrder); ok {
		r0 = rf(request, sqlTransaction, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DeliveryOrder)
		}
	}

	var r1 *model.ErrorLog
	if rf, ok := ret.Get(1).(func(*models.DeliveryOrderStoreRequest, *sql.Tx, context.Context) *model.ErrorLog); ok {
		r1 = rf(request, sqlTransaction, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// Get provides a mock function with given fields: request
func (_m *DeliveryOrderUseCaseInterface) Get(request *models.DeliveryOrderRequest) (*models.DeliveryOrders, *model.ErrorLog) {
	ret := _m.Called(request)

	var r0 *models.DeliveryOrders
	if rf, ok := ret.Get(0).(func(*models.DeliveryOrderRequest) *models.DeliveryOrders); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DeliveryOrders)
		}
	}

	var r1 *model.ErrorLog
	if rf, ok := ret.Get(1).(func(*models.DeliveryOrderRequest) *model.ErrorLog); ok {
		r1 = rf(request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// GetByAgentID provides a mock function with given fields: request
func (_m *DeliveryOrderUseCaseInterface) GetByAgentID(request *models.DeliveryOrderRequest) (*models.DeliveryOrders, *model.ErrorLog) {
	ret := _m.Called(request)

	var r0 *models.DeliveryOrders
	if rf, ok := ret.Get(0).(func(*models.DeliveryOrderRequest) *models.DeliveryOrders); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DeliveryOrders)
		}
	}

	var r1 *model.ErrorLog
	if rf, ok := ret.Get(1).(func(*models.DeliveryOrderRequest) *model.ErrorLog); ok {
		r1 = rf(request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: request, ctx
func (_m *DeliveryOrderUseCaseInterface) GetByID(request *models.DeliveryOrderRequest, ctx context.Context) (*models.DeliveryOrder, *model.ErrorLog) {
	ret := _m.Called(request, ctx)

	var r0 *models.DeliveryOrder
	if rf, ok := ret.Get(0).(func(*models.DeliveryOrderRequest, context.Context) *models.DeliveryOrder); ok {
		r0 = rf(request, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DeliveryOrder)
		}
	}

	var r1 *model.ErrorLog
	if rf, ok := ret.Get(1).(func(*models.DeliveryOrderRequest, context.Context) *model.ErrorLog); ok {
		r1 = rf(request, ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// GetByOrderSourceID provides a mock function with given fields: request
func (_m *DeliveryOrderUseCaseInterface) GetByOrderSourceID(request *models.DeliveryOrderRequest) (*models.DeliveryOrders, *model.ErrorLog) {
	ret := _m.Called(request)

	var r0 *models.DeliveryOrders
	if rf, ok := ret.Get(0).(func(*models.DeliveryOrderRequest) *models.DeliveryOrders); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DeliveryOrders)
		}
	}

	var r1 *model.ErrorLog
	if rf, ok := ret.Get(1).(func(*models.DeliveryOrderRequest) *model.ErrorLog); ok {
		r1 = rf(request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// GetByOrderStatusID provides a mock function with given fields: request
func (_m *DeliveryOrderUseCaseInterface) GetByOrderStatusID(request *models.DeliveryOrderRequest) (*models.DeliveryOrders, *model.ErrorLog) {
	ret := _m.Called(request)

	var r0 *models.DeliveryOrders
	if rf, ok := ret.Get(0).(func(*models.DeliveryOrderRequest) *models.DeliveryOrders); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DeliveryOrders)
		}
	}

	var r1 *model.ErrorLog
	if rf, ok := ret.Get(1).(func(*models.DeliveryOrderRequest) *model.ErrorLog); ok {
		r1 = rf(request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// GetBySalesmanID provides a mock function with given fields: request
func (_m *DeliveryOrderUseCaseInterface) GetBySalesmanID(request *models.DeliveryOrderRequest) (*models.DeliveryOrders, *model.ErrorLog) {
	ret := _m.Called(request)

	var r0 *models.DeliveryOrders
	if rf, ok := ret.Get(0).(func(*models.DeliveryOrderRequest) *models.DeliveryOrders); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DeliveryOrders)
		}
	}

	var r1 *model.ErrorLog
	if rf, ok := ret.Get(1).(func(*models.DeliveryOrderRequest) *model.ErrorLog); ok {
		r1 = rf(request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// GetByStoreID provides a mock function with given fields: request
func (_m *DeliveryOrderUseCaseInterface) GetByStoreID(request *models.DeliveryOrderRequest) (*models.DeliveryOrders, *model.ErrorLog) {
	ret := _m.Called(request)

	var r0 *models.DeliveryOrders
	if rf, ok := ret.Get(0).(func(*models.DeliveryOrderRequest) *models.DeliveryOrders); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DeliveryOrders)
		}
	}

	var r1 *model.ErrorLog
	if rf, ok := ret.Get(1).(func(*models.DeliveryOrderRequest) *model.ErrorLog); ok {
		r1 = rf(request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// SyncToOpenSearchFromCreateEvent provides a mock function with given fields: deliveryOrder, salesOrderUseCase, sqlTransaction, ctx
func (_m *DeliveryOrderUseCaseInterface) SyncToOpenSearchFromCreateEvent(deliveryOrder *models.DeliveryOrder, salesOrderUseCase usecases.SalesOrderUseCaseInterface, sqlTransaction *sql.Tx, ctx context.Context) *model.ErrorLog {
	ret := _m.Called(deliveryOrder, salesOrderUseCase, sqlTransaction, ctx)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.DeliveryOrder, usecases.SalesOrderUseCaseInterface, *sql.Tx, context.Context) *model.ErrorLog); ok {
		r0 = rf(deliveryOrder, salesOrderUseCase, sqlTransaction, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}

// SyncToOpenSearchFromUpdateEvent provides a mock function with given fields: deliveryOrder, ctx
func (_m *DeliveryOrderUseCaseInterface) SyncToOpenSearchFromUpdateEvent(deliveryOrder *models.DeliveryOrder, ctx context.Context) *model.ErrorLog {
	ret := _m.Called(deliveryOrder, ctx)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.DeliveryOrder, context.Context) *model.ErrorLog); ok {
		r0 = rf(deliveryOrder, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}

type mockConstructorTestingTNewDeliveryOrderUseCaseInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewDeliveryOrderUseCaseInterface creates a new instance of DeliveryOrderUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDeliveryOrderUseCaseInterface(t mockConstructorTestingTNewDeliveryOrderUseCaseInterface) *DeliveryOrderUseCaseInterface {
	mock := &DeliveryOrderUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
