// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "order-service/global/utils/model"

	mock "github.com/stretchr/testify/mock"

	models "order-service/app/models"

	sql "database/sql"
)

// DeliveryOrderConsumerUseCaseInterface is an autogenerated mock type for the DeliveryOrderConsumerUseCaseInterface type
type DeliveryOrderConsumerUseCaseInterface struct {
	mock.Mock
}

// Get provides a mock function with given fields: request
func (_m *DeliveryOrderConsumerUseCaseInterface) Get(request *models.DeliveryOrderExportRequest) *model.ErrorLog {
	ret := _m.Called(request)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.DeliveryOrderExportRequest) *model.ErrorLog); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}

// GetDetail provides a mock function with given fields: request
func (_m *DeliveryOrderConsumerUseCaseInterface) GetDetail(request *models.DeliveryOrderDetailExportRequest) *model.ErrorLog {
	ret := _m.Called(request)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.DeliveryOrderDetailExportRequest) *model.ErrorLog); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}

// SyncToOpenSearchFromCreateEvent provides a mock function with given fields: deliveryOrder, sqlTransaction, ctx
func (_m *DeliveryOrderConsumerUseCaseInterface) SyncToOpenSearchFromCreateEvent(deliveryOrder *models.DeliveryOrder, sqlTransaction *sql.Tx, ctx context.Context) *model.ErrorLog {
	ret := _m.Called(deliveryOrder, sqlTransaction, ctx)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.DeliveryOrder, *sql.Tx, context.Context) *model.ErrorLog); ok {
		r0 = rf(deliveryOrder, sqlTransaction, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}

// SyncToOpenSearchFromDeleteEvent provides a mock function with given fields: deliveryOrderId, deliveryOrderDetailId, sqlTransaction, ctx
func (_m *DeliveryOrderConsumerUseCaseInterface) SyncToOpenSearchFromDeleteEvent(deliveryOrderId *int, deliveryOrderDetailId []*int, sqlTransaction *sql.Tx, ctx context.Context) *model.ErrorLog {
	ret := _m.Called(deliveryOrderId, deliveryOrderDetailId, sqlTransaction, ctx)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*int, []*int, *sql.Tx, context.Context) *model.ErrorLog); ok {
		r0 = rf(deliveryOrderId, deliveryOrderDetailId, sqlTransaction, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}

// SyncToOpenSearchFromUpdateEvent provides a mock function with given fields: deliveryOrder, sqlTransaction, ctx
func (_m *DeliveryOrderConsumerUseCaseInterface) SyncToOpenSearchFromUpdateEvent(deliveryOrder *models.DeliveryOrder, sqlTransaction *sql.Tx, ctx context.Context) *model.ErrorLog {
	ret := _m.Called(deliveryOrder, sqlTransaction, ctx)

	var r0 *model.ErrorLog
	if rf, ok := ret.Get(0).(func(*models.DeliveryOrder, *sql.Tx, context.Context) *model.ErrorLog); ok {
		r0 = rf(deliveryOrder, sqlTransaction, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ErrorLog)
		}
	}

	return r0
}

type mockConstructorTestingTNewDeliveryOrderConsumerUseCaseInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewDeliveryOrderConsumerUseCaseInterface creates a new instance of DeliveryOrderConsumerUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDeliveryOrderConsumerUseCaseInterface(t mockConstructorTestingTNewDeliveryOrderConsumerUseCaseInterface) *DeliveryOrderConsumerUseCaseInterface {
	mock := &DeliveryOrderConsumerUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
