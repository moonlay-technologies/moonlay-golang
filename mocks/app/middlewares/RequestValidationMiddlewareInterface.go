// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	json "encoding/json"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"

	models "order-service/app/models"
)

// RequestValidationMiddlewareInterface is an autogenerated mock type for the RequestValidationMiddlewareInterface type
type RequestValidationMiddlewareInterface struct {
	mock.Mock
}

// AgentIdValidation provides a mock function with given fields: ctx, agentId, userId, actionName
func (_m *RequestValidationMiddlewareInterface) AgentIdValidation(ctx *gin.Context, agentId int, userId int, actionName string) error {
	ret := _m.Called(ctx, agentId, userId, actionName)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, int, int, string) error); ok {
		r0 = rf(ctx, agentId, userId, actionName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BrandIdValidation provides a mock function with given fields: ctx, brandId, agentId, actionName
func (_m *RequestValidationMiddlewareInterface) BrandIdValidation(ctx *gin.Context, brandId []int, agentId int, actionName string) error {
	ret := _m.Called(ctx, brandId, agentId, actionName)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, []int, int, string) error); ok {
		r0 = rf(ctx, brandId, agentId, actionName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataTypeValidation provides a mock function with given fields: ctx, err, unmarshalTypeError
func (_m *RequestValidationMiddlewareInterface) DataTypeValidation(ctx *gin.Context, err error, unmarshalTypeError *json.UnmarshalTypeError) {
	_m.Called(ctx, err, unmarshalTypeError)
}

// DateInputValidation provides a mock function with given fields: ctx, value, actionName
func (_m *RequestValidationMiddlewareInterface) DateInputValidation(ctx *gin.Context, value []*models.DateInputRequest, actionName string) error {
	ret := _m.Called(ctx, value, actionName)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, []*models.DateInputRequest, string) error); ok {
		r0 = rf(ctx, value, actionName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MandatoryValidation provides a mock function with given fields: ctx, err
func (_m *RequestValidationMiddlewareInterface) MandatoryValidation(ctx *gin.Context, err error) {
	_m.Called(ctx, err)
}

// MustActiveValidation provides a mock function with given fields: ctx, value
func (_m *RequestValidationMiddlewareInterface) MustActiveValidation(ctx *gin.Context, value []*models.MustActiveRequest) error {
	ret := _m.Called(ctx, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, []*models.MustActiveRequest) error); ok {
		r0 = rf(ctx, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MustActiveValidationCustomCode provides a mock function with given fields: code, ctx, value
func (_m *RequestValidationMiddlewareInterface) MustActiveValidationCustomCode(code int, ctx *gin.Context, value []*models.MustActiveRequest) error {
	ret := _m.Called(code, ctx, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *gin.Context, []*models.MustActiveRequest) error); ok {
		r0 = rf(code, ctx, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MustEmptyValidation provides a mock function with given fields: ctx, value
func (_m *RequestValidationMiddlewareInterface) MustEmptyValidation(ctx *gin.Context, value []*models.MustEmptyValidationRequest) error {
	ret := _m.Called(ctx, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, []*models.MustEmptyValidationRequest) error); ok {
		r0 = rf(ctx, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderSourceValidation provides a mock function with given fields: ctx, orderSourceId, soRefCode, actionName
func (_m *RequestValidationMiddlewareInterface) OrderSourceValidation(ctx *gin.Context, orderSourceId int, soRefCode string, actionName string) error {
	ret := _m.Called(ctx, orderSourceId, soRefCode, actionName)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, int, string, string) error); ok {
		r0 = rf(ctx, orderSourceId, soRefCode, actionName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SalesmanIdValidation provides a mock function with given fields: ctx, salesmanId, agentId, actionName
func (_m *RequestValidationMiddlewareInterface) SalesmanIdValidation(ctx *gin.Context, salesmanId int, agentId int, actionName string) error {
	ret := _m.Called(ctx, salesmanId, agentId, actionName)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, int, int, string) error); ok {
		r0 = rf(ctx, salesmanId, agentId, actionName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreIdValidation provides a mock function with given fields: ctx, storeId, agentId, actionName
func (_m *RequestValidationMiddlewareInterface) StoreIdValidation(ctx *gin.Context, storeId int, agentId int, actionName string) error {
	ret := _m.Called(ctx, storeId, agentId, actionName)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, int, int, string) error); ok {
		r0 = rf(ctx, storeId, agentId, actionName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UniqueValidation provides a mock function with given fields: ctx, value
func (_m *RequestValidationMiddlewareInterface) UniqueValidation(ctx *gin.Context, value []*models.UniqueRequest) error {
	ret := _m.Called(ctx, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Context, []*models.UniqueRequest) error); ok {
		r0 = rf(ctx, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadIntTypeValidation provides a mock function with given fields: request
func (_m *RequestValidationMiddlewareInterface) UploadIntTypeValidation(request []*models.TemplateRequest) (map[string]int, []string) {
	ret := _m.Called(request)

	var r0 map[string]int
	var r1 []string
	if rf, ok := ret.Get(0).(func([]*models.TemplateRequest) (map[string]int, []string)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func([]*models.TemplateRequest) map[string]int); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}

	if rf, ok := ret.Get(1).(func([]*models.TemplateRequest) []string); ok {
		r1 = rf(request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	return r0, r1
}

// UploadMandatoryValidation provides a mock function with given fields: request
func (_m *RequestValidationMiddlewareInterface) UploadMandatoryValidation(request []*models.TemplateRequest) []string {
	ret := _m.Called(request)

	var r0 []string
	if rf, ok := ret.Get(0).(func([]*models.TemplateRequest) []string); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// UploadMustActiveValidation provides a mock function with given fields: request
func (_m *RequestValidationMiddlewareInterface) UploadMustActiveValidation(request []*models.MustActiveRequest) []string {
	ret := _m.Called(request)

	var r0 []string
	if rf, ok := ret.Get(0).(func([]*models.MustActiveRequest) []string); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

type mockConstructorTestingTNewRequestValidationMiddlewareInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewRequestValidationMiddlewareInterface creates a new instance of RequestValidationMiddlewareInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRequestValidationMiddlewareInterface(t mockConstructorTestingTNewRequestValidationMiddlewareInterface) *RequestValidationMiddlewareInterface {
	mock := &RequestValidationMiddlewareInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
