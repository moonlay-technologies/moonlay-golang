// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "order-service/global/utils/model"

	mock "github.com/stretchr/testify/mock"

	models "order-service/app/models"

	sql "database/sql"
	openSearchRepositories "order-service/app/repositories/open_search"
)

// DeliveryOrderDetailOpenSearchRepositoryInterface is an autogenerated mock type for the DeliveryOrderDetailOpenSearchRepositoryInterface type
type DeliveryOrderDetailOpenSearchRepositoryInterface struct {
	mock.Mock
	openSearchRepositories.DeliveryOrderDetailOpenSearchRepositoryInterface
}

// Create provides a mock function with given fields: request, doDetail, sqlTransaction, ctx, result
func (_m *DeliveryOrderDetailOpenSearchRepositoryInterface) Create(request *models.DeliveryOrderDetailOpenSearch, doDetail *models.DeliveryOrderDetail, sqlTransaction *sql.Tx, ctx context.Context, result chan *models.DeliveryOrderDetailOpenSearchChan) {
	_m.Called(request, doDetail, sqlTransaction, ctx, result)
}

// Get provides a mock function with given fields: request, isCountOnly, result
func (_m *DeliveryOrderDetailOpenSearchRepositoryInterface) Get(request *models.DeliveryOrderDetailOpenSearchRequest, isCountOnly bool, result chan *models.DeliveryOrderDetailsOpenSearchChan) {
	_m.Called(request, isCountOnly, result)
}

// GetByID provides a mock function with given fields: request, resultChan
func (_m *DeliveryOrderDetailOpenSearchRepositoryInterface) GetByID(request *models.DeliveryOrderRequest, resultChan chan *models.DeliveryOrderDetailOpenSearchChan) {
	_m.Called(request, resultChan)
}

// generateDeliveryOrderQueryOpenSearchResult provides a mock function with given fields: openSearchQueryJson, isCountOnly
func (_m *DeliveryOrderDetailOpenSearchRepositoryInterface) generateDeliveryOrderQueryOpenSearchResult(openSearchQueryJson []byte, isCountOnly bool) (*models.DeliveryOrderDetailsOpenSearch, *model.ErrorLog) {
	ret := _m.Called(openSearchQueryJson, isCountOnly)

	var r0 *models.DeliveryOrderDetailsOpenSearch
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func([]byte, bool) (*models.DeliveryOrderDetailsOpenSearch, *model.ErrorLog)); ok {
		return rf(openSearchQueryJson, isCountOnly)
	}
	if rf, ok := ret.Get(0).(func([]byte, bool) *models.DeliveryOrderDetailsOpenSearch); ok {
		r0 = rf(openSearchQueryJson, isCountOnly)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DeliveryOrderDetailsOpenSearch)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, bool) *model.ErrorLog); ok {
		r1 = rf(openSearchQueryJson, isCountOnly)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// generateDeliveryOrderQueryOpenSearchTermRequest provides a mock function with given fields: term_field, term_value, request
func (_m *DeliveryOrderDetailOpenSearchRepositoryInterface) generateDeliveryOrderQueryOpenSearchTermRequest(term_field string, term_value interface{}, request *models.DeliveryOrderDetailOpenSearchRequest) []byte {
	ret := _m.Called(term_field, term_value, request)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, interface{}, *models.DeliveryOrderDetailOpenSearchRequest) []byte); ok {
		r0 = rf(term_field, term_value, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

type mockConstructorTestingTNewDeliveryOrderDetailOpenSearchRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewDeliveryOrderDetailOpenSearchRepositoryInterface creates a new instance of DeliveryOrderDetailOpenSearchRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDeliveryOrderDetailOpenSearchRepositoryInterface(t mockConstructorTestingTNewDeliveryOrderDetailOpenSearchRepositoryInterface) *DeliveryOrderDetailOpenSearchRepositoryInterface {
	mock := &DeliveryOrderDetailOpenSearchRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
