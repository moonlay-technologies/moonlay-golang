// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "order-service/global/utils/model"

	mock "github.com/stretchr/testify/mock"

	models "order-service/app/models"

	sql "database/sql"
	openSearchRepositories "order-service/app/repositories/open_search"
)

// DeliveryOrderOpenSearchRepositoryInterface is an autogenerated mock type for the DeliveryOrderOpenSearchRepositoryInterface type
type DeliveryOrderOpenSearchRepositoryInterface struct {
	mock.Mock
	openSearchRepositories.DeliveryOrderOpenSearchRepositoryInterface
}

// Create provides a mock function with given fields: request, sqlTransaction, ctx, result
func (_m *DeliveryOrderOpenSearchRepositoryInterface) Create(request *models.DeliveryOrder, sqlTransaction *sql.Tx, ctx context.Context, result chan *models.DeliveryOrderChan) {
	_m.Called(request, sqlTransaction, ctx, result)
}

// Get provides a mock function with given fields: request, isCountOnly, result
func (_m *DeliveryOrderOpenSearchRepositoryInterface) Get(request *models.DeliveryOrderRequest, isCountOnly bool, result chan *models.DeliveryOrdersChan) {
	_m.Called(request, isCountOnly, result)
}

// GetByAgentID provides a mock function with given fields: request, result
func (_m *DeliveryOrderOpenSearchRepositoryInterface) GetByAgentID(request *models.DeliveryOrderRequest, result chan *models.DeliveryOrdersChan) {
	_m.Called(request, result)
}

// GetByID provides a mock function with given fields: request, result
func (_m *DeliveryOrderOpenSearchRepositoryInterface) GetByID(request *models.DeliveryOrderRequest, result chan *models.DeliveryOrderChan) {
	_m.Called(request, result)
}

// GetBySalesOrderID provides a mock function with given fields: request, result
func (_m *DeliveryOrderOpenSearchRepositoryInterface) GetBySalesOrderID(request *models.DeliveryOrderRequest, result chan *models.DeliveryOrdersChan) {
	_m.Called(request, result)
}

// GetBySalesmanID provides a mock function with given fields: request, result
func (_m *DeliveryOrderOpenSearchRepositoryInterface) GetBySalesmanID(request *models.DeliveryOrderRequest, result chan *models.DeliveryOrdersChan) {
	_m.Called(request, result)
}

// GetBySalesmansID provides a mock function with given fields: request, result
func (_m *DeliveryOrderOpenSearchRepositoryInterface) GetBySalesmansID(request *models.DeliveryOrderRequest, result chan *models.DeliveryOrdersChan) {
	_m.Called(request, result)
}

// GetByStoreID provides a mock function with given fields: request, result
func (_m *DeliveryOrderOpenSearchRepositoryInterface) GetByStoreID(request *models.DeliveryOrderRequest, result chan *models.DeliveryOrdersChan) {
	_m.Called(request, result)
}

// GetDetailByID provides a mock function with given fields: doDetailID, result
func (_m *DeliveryOrderOpenSearchRepositoryInterface) GetDetailByID(doDetailID int, result chan *models.DeliveryOrderChan) {
	_m.Called(doDetailID, result)
}

// GetDetailsByDoID provides a mock function with given fields: request, result
func (_m *DeliveryOrderOpenSearchRepositoryInterface) GetDetailsByDoID(request *models.DeliveryOrderDetailRequest, result chan *models.DeliveryOrderChan) {
	_m.Called(request, result)
}

// generateDeliveryOrderDetailQueryOpenSearchTermRequest provides a mock function with given fields: term_field, term_value, request
func (_m *DeliveryOrderOpenSearchRepositoryInterface) generateDeliveryOrderDetailQueryOpenSearchTermRequest(term_field string, term_value interface{}, request *models.DeliveryOrderDetailRequest) []byte {
	ret := _m.Called(term_field, term_value, request)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, interface{}, *models.DeliveryOrderDetailRequest) []byte); ok {
		r0 = rf(term_field, term_value, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// generateDeliveryOrderQueryOpenSearchByQueryParamTermRequest provides a mock function with given fields: term_field, term_value, request
func (_m *DeliveryOrderOpenSearchRepositoryInterface) generateDeliveryOrderQueryOpenSearchByQueryParamTermRequest(term_field string, term_value interface{}, request *models.DeliveryOrderRequest) []byte {
	ret := _m.Called(term_field, term_value, request)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, interface{}, *models.DeliveryOrderRequest) []byte); ok {
		r0 = rf(term_field, term_value, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// generateDeliveryOrderQueryOpenSearchResult provides a mock function with given fields: openSearchQueryJson, withDeliveryOrderDetails, isCountOnly
func (_m *DeliveryOrderOpenSearchRepositoryInterface) generateDeliveryOrderQueryOpenSearchResult(openSearchQueryJson []byte, withDeliveryOrderDetails bool, isCountOnly bool) (*models.DeliveryOrders, *model.ErrorLog) {
	ret := _m.Called(openSearchQueryJson, withDeliveryOrderDetails, isCountOnly)

	var r0 *models.DeliveryOrders
	var r1 *model.ErrorLog
	if rf, ok := ret.Get(0).(func([]byte, bool, bool) (*models.DeliveryOrders, *model.ErrorLog)); ok {
		return rf(openSearchQueryJson, withDeliveryOrderDetails, isCountOnly)
	}
	if rf, ok := ret.Get(0).(func([]byte, bool, bool) *models.DeliveryOrders); ok {
		r0 = rf(openSearchQueryJson, withDeliveryOrderDetails, isCountOnly)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DeliveryOrders)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, bool, bool) *model.ErrorLog); ok {
		r1 = rf(openSearchQueryJson, withDeliveryOrderDetails, isCountOnly)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.ErrorLog)
		}
	}

	return r0, r1
}

// generateDeliveryOrderQueryOpenSearchTermRequest provides a mock function with given fields: term_field, term_value, request
func (_m *DeliveryOrderOpenSearchRepositoryInterface) generateDeliveryOrderQueryOpenSearchTermRequest(term_field string, term_value interface{}, request *models.DeliveryOrderRequest) []byte {
	ret := _m.Called(term_field, term_value, request)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, interface{}, *models.DeliveryOrderRequest) []byte); ok {
		r0 = rf(term_field, term_value, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

type mockConstructorTestingTNewDeliveryOrderOpenSearchRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewDeliveryOrderOpenSearchRepositoryInterface creates a new instance of DeliveryOrderOpenSearchRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDeliveryOrderOpenSearchRepositoryInterface(t mockConstructorTestingTNewDeliveryOrderOpenSearchRepositoryInterface) *DeliveryOrderOpenSearchRepositoryInterface {
	mock := &DeliveryOrderOpenSearchRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
