// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	models "order-service/app/models"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// SalesOrderRepositoryInterface is an autogenerated mock type for the SalesOrderRepositoryInterface type
type SalesOrderRepositoryInterface struct {
	mock.Mock
}

// DeleteByID provides a mock function with given fields: salesOrder, sqlTransaction, ctx, result
func (_m *SalesOrderRepositoryInterface) DeleteByID(salesOrder *models.SalesOrder, sqlTransaction *sql.Tx, ctx context.Context, result chan *models.SalesOrderChan) {
	_m.Called(salesOrder, sqlTransaction, ctx, result)
}

// GetByAgentRefCode provides a mock function with given fields: soRefCode, agentID, countOnly, ctx, result
func (_m *SalesOrderRepositoryInterface) GetByAgentRefCode(soRefCode string, agentID int, countOnly bool, ctx context.Context, result chan *models.SalesOrderChan) {
	_m.Called(soRefCode, agentID, countOnly, ctx, result)
}

// GetByCode provides a mock function with given fields: soCode, countOnly, ctx, result
func (_m *SalesOrderRepositoryInterface) GetByCode(soCode string, countOnly bool, ctx context.Context, result chan *models.SalesOrderChan) {
	_m.Called(soCode, countOnly, ctx, result)
}

// GetByID provides a mock function with given fields: id, countOnly, ctx, result
func (_m *SalesOrderRepositoryInterface) GetByID(id int, countOnly bool, ctx context.Context, result chan *models.SalesOrderChan) {
	_m.Called(id, countOnly, ctx, result)
}

// GetBySoRefCode provides a mock function with given fields: soRefCode, countOnly, ctx, result
func (_m *SalesOrderRepositoryInterface) GetBySoRefCode(soRefCode string, countOnly bool, ctx context.Context, result chan *models.SalesOrderChan) {
	_m.Called(soRefCode, countOnly, ctx, result)
}

// Insert provides a mock function with given fields: request, sqlTransaction, ctx, result
func (_m *SalesOrderRepositoryInterface) Insert(request *models.SalesOrder, sqlTransaction *sql.Tx, ctx context.Context, result chan *models.SalesOrderChan) {
	_m.Called(request, sqlTransaction, ctx, result)
}

// RemoveCacheByID provides a mock function with given fields: id, ctx, result
func (_m *SalesOrderRepositoryInterface) RemoveCacheByID(id int, ctx context.Context, result chan *models.SalesOrderChan) {
	_m.Called(id, ctx, result)
}

// UpdateByID provides a mock function with given fields: id, request, isInsertToJourney, reason, sqlTransaction, ctx, resultChan
func (_m *SalesOrderRepositoryInterface) UpdateByID(id int, request *models.SalesOrder, isInsertToJourney bool, reason string, sqlTransaction *sql.Tx, ctx context.Context, resultChan chan *models.SalesOrderChan) {
	_m.Called(id, request, isInsertToJourney, reason, sqlTransaction, ctx, resultChan)
}

type mockConstructorTestingTNewSalesOrderRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewSalesOrderRepositoryInterface creates a new instance of SalesOrderRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSalesOrderRepositoryInterface(t mockConstructorTestingTNewSalesOrderRepositoryInterface) *SalesOrderRepositoryInterface {
	mock := &SalesOrderRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
