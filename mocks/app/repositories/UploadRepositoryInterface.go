// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	bytes "bytes"
	models "order-service/app/models"

	mock "github.com/stretchr/testify/mock"
)

// UploadRepositoryInterface is an autogenerated mock type for the UploadRepositoryInterface type
type UploadRepositoryInterface struct {
	mock.Mock
}

// GetSosjRowData provides a mock function with given fields: agentId, storeCode, brandId, productSku, warehouseId, salesmanId, addressId, resultChan
func (_m *UploadRepositoryInterface) GetSosjRowData(agentId string, storeCode string, brandId string, productSku string, warehouseId string, salesmanId string, addressId string, resultChan chan *models.RowDataSosjUploadErrorLogChan) {
	_m.Called(agentId, storeCode, brandId, productSku, warehouseId, salesmanId, addressId, resultChan)
}

// ReadFile provides a mock function with given fields: url
func (_m *UploadRepositoryInterface) ReadFile(url string) ([]byte, error) {
	ret := _m.Called(url)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadFile provides a mock function with given fields: data, filePath, fileName, fileType
func (_m *UploadRepositoryInterface) UploadFile(data *bytes.Buffer, filePath string, fileName string, fileType string) error {
	ret := _m.Called(data, filePath, fileName, fileType)

	var r0 error
	if rf, ok := ret.Get(0).(func(*bytes.Buffer, string, string, string) error); ok {
		r0 = rf(data, filePath, fileName, fileType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUploadRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewUploadRepositoryInterface creates a new instance of UploadRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUploadRepositoryInterface(t mockConstructorTestingTNewUploadRepositoryInterface) *UploadRepositoryInterface {
	mock := &UploadRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
